---

aliases:
  # common - cache
  - &cache_restore_git
    restore_cache:
      name: cache | restore git
      keys:
        - src-v1-{{ arch }}-{{ .Branch }}-{{ .Revision }}
        - src-v1-{{ arch }}-{{ .Branch }}-
        - src-v1-{{ arch }}
  - &cache_save_git
    save_cache:
      name: cache | save git
      key: src-v1-{{ arch }}-{{ .Branch }}-{{ .Revision }}
      paths:
        - ".git"

  - &cache_restore_bundler
    restore_cache:
      name: cache | restore bundle
      key: v2-gems-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile" }}-{{ checksum "fastlane.gemspec" }}
  - &cache_save_bundler
    save_cache:
      name: cache | store bundle
      key: v2-gems-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile" }}-{{ checksum "fastlane.gemspec" }}
      paths:
        - ".bundle"

  - &cache_restore_homebrew
    restore_cache:
      name: cache | restore homebrew
      keys:
        - v3-homebrew-{{ epoch }}
        - v3-homebrew
  - &cache_save_homebrew
    save_cache:
      name: cache | store homebrew
      key: v3-homebrew-{{ epoch }}
      paths:
        - "/usr/local/Homebrew"

  - &cache_restore_rubocop
    restore_cache:
      name: cache | restore rubocop
      keys:
        - v1-rubocop-{{ arch }}-{{ epoch }}
        - v1-rubocop-{{ arch }}-
  - &cache_save_rubocop
    save_cache:
      name: cache | store rubocop
      key: v1-rubocop-{{ arch }}-{{ epoch }}
      paths:
        - "~/.cache/rubocop_cache"

  - &set_ruby
    run:
      name: Set Ruby version
      command: | # see https://circleci.com/docs/2.0/testing-ios/#using-ruby
        echo "ruby-${_RUBY_VERSION}" > ~/.ruby-version
        echo 'chruby ruby-${_RUBY_VERSION}' >> ~/.bash_profile

version: 2

jobs:
  'Execute tests on macOS (Xcode 10.2.1, Ruby 2.4)': &tests_macos  # define alias
    macos:
      xcode: '10.2.1'
    environment:
      CIRCLE_TEST_REPORTS: '~/test-reports'
      LC_ALL: 'en_US.UTF-8'
      LANG: 'en_US.UTF-8'
      _RUBY_VERSION: '2.4'
    shell: '/bin/bash --login -eo pipefail'
    steps:
      - *cache_restore_git
      - checkout
      - *cache_save_git
      - *cache_restore_bundler
      - *cache_restore_homebrew
      - *set_ruby
      - run:
          name: debug | ruby version
          command: |
            ruby -v
      - run:
          name: Setup Build
          command: |
            mkdir -p ~/test-reports
            brew update
            brew untap caskroom/versions || true
            brew install shellcheck
            bundle check --path .bundle || bundle install --jobs=4 --retry=3 --path .bundle
      - *cache_save_homebrew
      - *cache_save_bundler
      - run:
          name: Check PR Metadata
          command: bundle exec danger || echo "danger failed"
      - *cache_restore_rubocop
      - run: bundle exec fastlane execute_tests
      - *cache_save_rubocop
      - store_test_results:
          path: ~/test-reports
      - store_artifacts:
          path: ~/test-reports/rspec
          destination: test-reports
      - run:
          name: Post Test Results to GitHub
          command: bundle exec danger || echo "danger failed"
          when: always  # Run this even when tests fail
  'Execute tests on macOS (Xcode 11.0.0, Ruby 2.5)':
    <<: *tests_macos
    macos:
      xcode: '11.0.0'
    environment:
      _RUBY_VERSION: '2.5'
  'Execute tests on macOS (Xcode 11.4.0, Ruby 2.6)':
    <<: *tests_macos
    macos:
      xcode: '11.4.0'
    environment:
      _RUBY_VERSION: '2.6'

  'Execute tests on Ubuntu':
    environment:
      CIRCLE_TEST_REPORTS: '~/test-reports'
      LC_ALL: 'C.UTF-8'
      LANG: 'C.UTF-8'
      FASTLANE_ITUNES_TRANSPORTER_PATH: .bundle
    docker:
      - image: 'fastlanetools/ci:0.2.0'
    steps:
      - *cache_restore_git
      - checkout
      - *cache_save_git
      - *cache_restore_bundler
      - run:
          name: Setup Build
          command: |
            mkdir -p ~/test-reports
            bundle check --path .bundle || bundle install --jobs=4 --retry=3 --path .bundle
      - *cache_save_bundler
      - run:
          name: Check PR Metadata
          command: bundle exec danger || echo "danger failed"
      - *cache_restore_rubocop
      - run: bundle exec fastlane execute_tests
      - *cache_save_rubocop
      - store_test_results:
          path: ~/test-reports
      - store_artifacts:
          path: ~/test-reports/rspec
          destination: test-reports
      - run:
          name: Post Test Results to GitHub
          command: bundle exec danger || echo "danger failed"
          when: always  # Run this even when tests fail

  "Validate Fastlane.swift Generation":
    <<: *tests_macos
    macos:
      xcode: '11.0.0'
    environment:
      _RUBY_VERSION: '2.5'
    steps:
      - *cache_restore_git
      - checkout
      - *cache_save_git
      - *cache_restore_bundler
      - *cache_restore_homebrew
      - *set_ruby
      - run:
          name: Setup Build
          command: |
            mkdir -p ~/test-reports
            brew untap caskroom/versions
            brew install shellcheck
            bundle check --path .bundle || bundle install --jobs=4 --retry=3 --path .bundle
      - *cache_save_homebrew
      - *cache_save_bundler
      - run: bundle exec fastlane generate_swift_api

  "Validate Documentation":
    docker:
      - image: circleci/ruby:2.4
    steps:
      - *cache_restore_git
      - checkout
      - *cache_save_git
      - *cache_restore_bundler

      - run:
          name: Setup Build
          command: |
            gem update --system
            gem install bundler
            bundle check --path .bundle || bundle install --jobs=4 --retry=3 --path .bundle

      - *cache_save_bundler

      - run: bundle exec fastlane validate_docs

  "Lint Source Code":
    docker:
      - image: circleci/ruby:2.5
    steps:
      - *cache_restore_git
      - checkout
      - *cache_save_git
      - *cache_restore_bundler

      - run:
          name: Setup Build
          command: |
            bundle check --path .bundle || bundle install --jobs=4 --retry=3 --path .bundle

      - *cache_save_bundler

      - run: bundle exec fastlane lint_source

  "Execute modules load up tests":
    environment:
      LC_ALL: C.UTF-8
      LANG: C.UTF-8
    docker:
      - image: circleci/ruby:2.4
    shell: /bin/bash --login -eo pipefail
    steps:
      - *cache_restore_git
      - checkout
      - *cache_save_git

      - run:
          name: Setup Build
          # Build gem from fastlane.gemspec and install locally
          command: |
            gem install $(echo $(gem build fastlane.gemspec) | sed 's/.*File: //')

      - run: /bin/bash ./test_modules/run_tests.sh

workflows:
  version: 2
  build:
    jobs:
      - 'Execute tests on macOS (Xcode 10.2.1, Ruby 2.4)'
      - 'Execute tests on macOS (Xcode 11.0.0, Ruby 2.5)'
      - 'Execute tests on macOS (Xcode 11.4.0, Ruby 2.6)'
      - 'Execute tests on Ubuntu'

      - "Validate Fastlane.swift Generation"
      - "Validate Documentation"

      - "Lint Source Code"

      - "Execute modules load up tests"

...
